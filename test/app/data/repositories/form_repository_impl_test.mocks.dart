// Mocks generated by Mockito 5.4.4 from annotations
// in formularios_front/test/app/data/repositories/form_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:formularios_front/app/data/datasources/form_datasource.dart'
    as _i3;
import 'package:formularios_front/app/data/datasources/form_local_datasource.dart'
    as _i8;
import 'package:formularios_front/app/domain/entities/form_entity.dart' as _i2;
import 'package:formularios_front/app/domain/entities/justification_entity.dart'
    as _i7;
import 'package:formularios_front/app/domain/entities/section_entity.dart'
    as _i6;
import 'package:formularios_front/app/domain/enum/form_status_enum.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFormEntity_0 extends _i1.SmartFake implements _i2.FormEntity {
  _FakeFormEntity_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [IFormDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockIFormDatasource extends _i1.Mock implements _i3.IFormDatasource {
  MockIFormDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.FormEntity>> getUserForms() => (super.noSuchMethod(
        Invocation.method(
          #getUserForms,
          [],
        ),
        returnValue: _i4.Future<List<_i2.FormEntity>>.value(<_i2.FormEntity>[]),
      ) as _i4.Future<List<_i2.FormEntity>>);

  @override
  _i4.Future<_i2.FormEntity> updateFormStatus({
    required _i5.FormStatusEnum? status,
    required String? formId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateFormStatus,
          [],
          {
            #status: status,
            #formId: formId,
          },
        ),
        returnValue: _i4.Future<_i2.FormEntity>.value(_FakeFormEntity_0(
          this,
          Invocation.method(
            #updateFormStatus,
            [],
            {
              #status: status,
              #formId: formId,
            },
          ),
        )),
      ) as _i4.Future<_i2.FormEntity>);

  @override
  _i4.Future<_i2.FormEntity> postForm({
    required String? formId,
    required List<_i6.SectionEntity>? sections,
    String? vinculationFormId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #postForm,
          [],
          {
            #formId: formId,
            #sections: sections,
            #vinculationFormId: vinculationFormId,
          },
        ),
        returnValue: _i4.Future<_i2.FormEntity>.value(_FakeFormEntity_0(
          this,
          Invocation.method(
            #postForm,
            [],
            {
              #formId: formId,
              #sections: sections,
              #vinculationFormId: vinculationFormId,
            },
          ),
        )),
      ) as _i4.Future<_i2.FormEntity>);

  @override
  _i4.Future<_i2.FormEntity> createForm({required _i2.FormEntity? form}) =>
      (super.noSuchMethod(
        Invocation.method(
          #createForm,
          [],
          {#form: form},
        ),
        returnValue: _i4.Future<_i2.FormEntity>.value(_FakeFormEntity_0(
          this,
          Invocation.method(
            #createForm,
            [],
            {#form: form},
          ),
        )),
      ) as _i4.Future<_i2.FormEntity>);

  @override
  _i4.Future<_i2.FormEntity> cancelForm({
    required _i7.JustificationEntity? justification,
    required String? formId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #cancelForm,
          [],
          {
            #justification: justification,
            #formId: formId,
          },
        ),
        returnValue: _i4.Future<_i2.FormEntity>.value(_FakeFormEntity_0(
          this,
          Invocation.method(
            #cancelForm,
            [],
            {
              #justification: justification,
              #formId: formId,
            },
          ),
        )),
      ) as _i4.Future<_i2.FormEntity>);
}

/// A class which mocks [IFormLocalDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockIFormLocalDatasource extends _i1.Mock
    implements _i8.IFormLocalDatasource {
  MockIFormLocalDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> saveForms({required List<_i2.FormEntity>? forms}) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveForms,
          [],
          {#forms: forms},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i2.FormEntity>> getForms() => (super.noSuchMethod(
        Invocation.method(
          #getForms,
          [],
        ),
        returnValue: _i4.Future<List<_i2.FormEntity>>.value(<_i2.FormEntity>[]),
      ) as _i4.Future<List<_i2.FormEntity>>);

  @override
  _i4.Future<void> updateForm({required _i2.FormEntity? form}) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateForm,
          [],
          {#form: form},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteForm({required String? formId}) => (super.noSuchMethod(
        Invocation.method(
          #deleteForm,
          [],
          {#formId: formId},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> addForm({required _i2.FormEntity? form}) =>
      (super.noSuchMethod(
        Invocation.method(
          #addForm,
          [],
          {#form: form},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> cancelForm({
    required _i7.JustificationEntity? justification,
    required String? formId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #cancelForm,
          [],
          {
            #justification: justification,
            #formId: formId,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
