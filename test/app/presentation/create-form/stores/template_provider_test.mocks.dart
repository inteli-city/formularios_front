// Mocks generated by Mockito 5.4.4 from annotations
// in formularios_front/test/app/presentation/create-form/stores/template_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:ui' as _i16;

import 'package:dartz/dartz.dart' as _i2;
import 'package:formularios_front/app/domain/entities/form_entity.dart' as _i4;
import 'package:formularios_front/app/domain/entities/section_entity.dart'
    as _i14;
import 'package:formularios_front/app/domain/entities/template_entity.dart'
    as _i8;
import 'package:formularios_front/app/domain/enum/form_status_enum.dart'
    as _i11;
import 'package:formularios_front/app/domain/enum/order_enum.dart' as _i13;
import 'package:formularios_front/app/domain/enum/priority_enum.dart' as _i15;
import 'package:formularios_front/app/domain/usecases/get_templates_usecase.dart'
    as _i5;
import 'package:formularios_front/app/presentation/home/states/form_user_state.dart'
    as _i3;
import 'package:formularios_front/app/presentation/home/stores/forms_provider.dart'
    as _i9;
import 'package:gates_microapp_flutter/shared/helpers/errors/errors.dart'
    as _i7;
import 'package:google_maps_flutter/google_maps_flutter.dart' as _i10;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i12;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFormUserState_1 extends _i1.SmartFake implements _i3.FormUserState {
  _FakeFormUserState_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFormEntity_2 extends _i1.SmartFake implements _i4.FormEntity {
  _FakeFormEntity_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [IGetTemplatesUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockIGetTemplatesUsecase extends _i1.Mock
    implements _i5.IGetTemplatesUsecase {
  MockIGetTemplatesUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.Either<_i7.Failure, List<_i8.TemplateEntity>>> call() =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue:
            _i6.Future<_i2.Either<_i7.Failure, List<_i8.TemplateEntity>>>.value(
                _FakeEither_0<_i7.Failure, List<_i8.TemplateEntity>>(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, List<_i8.TemplateEntity>>>);
}

/// A class which mocks [FormsProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockFormsProvider extends _i1.Mock implements _i9.FormsProvider {
  MockFormsProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.FormUserState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeFormUserState_1(
          this,
          Invocation.getter(#state),
        ),
      ) as _i3.FormUserState);

  @override
  set state(_i3.FormUserState? _state) => super.noSuchMethod(
        Invocation.setter(
          #state,
          _state,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int get pendingRequestsCount => (super.noSuchMethod(
        Invocation.getter(#pendingRequestsCount),
        returnValue: 0,
      ) as int);

  @override
  List<String> get templates => (super.noSuchMethod(
        Invocation.getter(#templates),
        returnValue: <String>[],
      ) as List<String>);

  @override
  List<String> get streets => (super.noSuchMethod(
        Invocation.getter(#streets),
        returnValue: <String>[],
      ) as List<String>);

  @override
  List<String> get systems => (super.noSuchMethod(
        Invocation.getter(#systems),
        returnValue: <String>[],
      ) as List<String>);

  @override
  List<String> get cities => (super.noSuchMethod(
        Invocation.getter(#cities),
        returnValue: <String>[],
      ) as List<String>);

  @override
  List<(String, String, _i10.LatLng)> get locations => (super.noSuchMethod(
        Invocation.getter(#locations),
        returnValue: <(String, String, _i10.LatLng)>[],
      ) as List<(String, String, _i10.LatLng)>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i4.FormEntity getFormByExternId(String? externId) => (super.noSuchMethod(
        Invocation.method(
          #getFormByExternId,
          [externId],
        ),
        returnValue: _FakeFormEntity_2(
          this,
          Invocation.method(
            #getFormByExternId,
            [externId],
          ),
        ),
      ) as _i4.FormEntity);

  @override
  void setState(_i3.FormUserState? value) => super.noSuchMethod(
        Invocation.method(
          #setState,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<void> fetchFormsLocally() => (super.noSuchMethod(
        Invocation.method(
          #fetchFormsLocally,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> syncForms() => (super.noSuchMethod(
        Invocation.method(
          #syncForms,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  String getFormsCountByStatus(_i11.FormStatusEnum? status) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFormsCountByStatus,
          [status],
        ),
        returnValue: _i12.dummyValue<String>(
          this,
          Invocation.method(
            #getFormsCountByStatus,
            [status],
          ),
        ),
      ) as String);

  @override
  void filterForms({
    required String? template,
    required String? street,
    required String? city,
    required String? system,
    required _i11.FormStatusEnum? enumStatus,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #filterForms,
          [],
          {
            #template: template,
            #street: street,
            #city: city,
            #system: system,
            #enumStatus: enumStatus,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void orderForms(_i13.OrderEnum? orderEnum) => super.noSuchMethod(
        Invocation.method(
          #orderForms,
          [orderEnum],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<_i4.FormEntity?> updateFormStatus({
    required String? formId,
    required _i11.FormStatusEnum? status,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateFormStatus,
          [],
          {
            #formId: formId,
            #status: status,
          },
        ),
        returnValue: _i6.Future<_i4.FormEntity?>.value(),
      ) as _i6.Future<_i4.FormEntity?>);

  @override
  _i6.Future<void> sendForm({
    required String? formId,
    required List<_i14.SectionEntity>? sections,
    String? vinculationFormId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendForm,
          [],
          {
            #formId: formId,
            #sections: sections,
            #vinculationFormId: vinculationFormId,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> saveForm({required _i4.FormEntity? form}) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveForm,
          [],
          {#form: form},
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> createForm({
    required _i8.TemplateEntity? template,
    required String? area,
    required String? city,
    required String? street,
    required int? number,
    required double? latitude,
    required double? longitude,
    required String? region,
    required _i15.PriorityEnum? priority,
    required String? description,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createForm,
          [],
          {
            #template: template,
            #area: area,
            #city: city,
            #street: street,
            #number: number,
            #latitude: latitude,
            #longitude: longitude,
            #region: region,
            #priority: priority,
            #description: description,
          },
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  void addListener(_i16.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i16.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
